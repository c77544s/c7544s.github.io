<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB整合到Spring Boot</title>
      <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/%E4%B8%AD%E9%97%B4%E4%BB%B6/MongoDB%E6%95%B4%E5%90%88%E5%88%B0Spring%20Boot/"/>
      <url>/2023/05/08/%E5%90%8E%E7%AB%AF/%E4%B8%AD%E9%97%B4%E4%BB%B6/MongoDB%E6%95%B4%E5%90%88%E5%88%B0Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h3 id="1-本机测试，使用-Docker-快速搭建-MongoDB："><a href="#1-本机测试，使用-Docker-快速搭建-MongoDB：" class="headerlink" title="1. 本机测试，使用 Docker 快速搭建 MongoDB："></a>1. 本机测试，使用 Docker 快速搭建 MongoDB：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name mongo -p 27017:27017 mongo --auth</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mongo mongo admin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> db.createUser(&#123; user:<span class="string">&#x27;admin&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试使用上面创建的用户信息进行连接，验证成功返回1。</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.auth(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="2-Spring-Boot-导入-mongodb-相关依赖"><a href="#2-Spring-Boot-导入-mongodb-相关依赖" class="headerlink" title="2. Spring Boot 导入 mongodb 相关依赖"></a>2. Spring Boot 导入 mongodb 相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编辑-Spring-Boot-配置文件"><a href="#3-编辑-Spring-Boot-配置文件" class="headerlink" title="3. 编辑 Spring Boot 配置文件"></a>3. 编辑 Spring Boot 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"><span class="attr">data:</span>  </span><br><span class="line"><span class="attr">mongodb:</span>  </span><br><span class="line"><span class="attr">uri:</span> <span class="string">mongodb://admin:123456@localhost:27017/admin</span></span><br></pre></td></tr></table></figure><h3 id="4-基于MongoTemplate-开发CRUD"><a href="#4-基于MongoTemplate-开发CRUD" class="headerlink" title="4. 基于MongoTemplate 开发CRUD"></a>4. 基于MongoTemplate 开发CRUD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationTests</span> &#123;  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">User</span> <span class="variable">alice</span> <span class="operator">=</span> mongoTemplate.insert(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>));  </span><br><span class="line">System.out.println(alice);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 查询全部  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;  </span><br><span class="line">List&lt;User&gt; all = mongoTemplate.findAll(User.class);  </span><br><span class="line">all.forEach(System.out::println);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根据id查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mongoTemplate.findById(<span class="string">&quot;1&quot;</span>, User.class);  </span><br><span class="line">System.out.println(user);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根据条件查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findByName</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Alice&quot;</span>));  </span><br><span class="line">List&lt;User&gt; users = mongoTemplate.find(query, User.class);  </span><br><span class="line">users.forEach(System.out::println);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 模糊查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findByNameLike</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).regex(<span class="string">&quot;A&quot;</span>));  </span><br><span class="line">List&lt;User&gt; users = mongoTemplate.find(query, User.class);  </span><br><span class="line">users.forEach(System.out::println);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 分页查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findByNameLikePage</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).regex(<span class="string">&quot;A&quot;</span>));  </span><br><span class="line">query.skip(<span class="number">0</span>).limit(<span class="number">2</span>);  </span><br><span class="line">List&lt;User&gt; users = mongoTemplate.find(query, User.class);  </span><br><span class="line">users.forEach(System.out::println);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修改  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update1</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Alice&quot;</span>));  </span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mongoTemplate.findOne(query, User.class);  </span><br><span class="line">user.setAge(<span class="number">24</span>);  </span><br><span class="line">mongoTemplate.save(user);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修改  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update2</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Alice&quot;</span>));  </span><br><span class="line"><span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();  </span><br><span class="line">update.set(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);  </span><br><span class="line"><span class="type">UpdateResult</span> <span class="variable">upsert</span> <span class="operator">=</span> mongoTemplate.upsert(query, update, User.class);  </span><br><span class="line"><span class="type">long</span> <span class="variable">modifiedCount</span> <span class="operator">=</span> upsert.getModifiedCount();<span class="comment">//获取到修改受影响的行数  </span></span><br><span class="line">System.out.println(<span class="string">&quot;受影响的条数：&quot;</span>+modifiedCount);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 删除  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Alice&quot;</span>));  </span><br><span class="line"><span class="type">DeleteResult</span> <span class="variable">remove</span> <span class="operator">=</span> mongoTemplate.remove(query, User.class);  </span><br><span class="line"><span class="type">long</span> <span class="variable">deletedCount</span> <span class="operator">=</span> remove.getDeletedCount();  </span><br><span class="line">System.out.println(<span class="string">&quot;删除的条数：&quot;</span>+deletedCount);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-基于-MongoRepository-开发-CRUD"><a href="#5-基于-MongoRepository-开发-CRUD" class="headerlink" title="5. 基于 MongoRepository 开发 CRUD"></a>5. 基于 MongoRepository 开发 CRUD</h3><p>Spring Data 提供了对 mongodb 数据访问的支持，我们只需要继承 MongoRepository 类，按照 Spring Data 规范就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTests</span> &#123;  </span><br><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="keyword">private</span> UserRepository userRepository;  </span><br><span class="line"><span class="comment">// 保存  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userRepository.save(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;Demon&quot;</span>, <span class="number">21</span>));  </span><br><span class="line">System.out.println(user1);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//查询所有  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span>&#123;  </span><br><span class="line">List&lt;User&gt; lists = userRepository.findAll();  </span><br><span class="line">lists.forEach(System.out::println); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//根据id查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(<span class="string">&quot;2&quot;</span>).get();  </span><br><span class="line">System.out.println(user);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//条件查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserList</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  </span><br><span class="line">user.setName(<span class="string">&quot;Demon&quot;</span>);  </span><br><span class="line">user.setAge(<span class="number">21</span>);  </span><br><span class="line">Example&lt;User&gt; example = Example.of(user);  </span><br><span class="line">List&lt;User&gt; all = userRepository.findAll(example);  </span><br><span class="line">System.out.println(all);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//模糊条件查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLikeUserList</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="comment">///创建匹配器，即如何使用查询条件  </span></span><br><span class="line"><span class="type">ExampleMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> ExampleMatcher.matching()<span class="comment">//构建对象  </span></span><br><span class="line">.withStringMatcher(ExampleMatcher.StringMatcher.STARTING)<span class="comment">//改变默认字符串匹配方式：模糊查询  </span></span><br><span class="line">.withIgnoreCase(<span class="literal">true</span>);<span class="comment">//改变默认大小写忽略方式：忽略大小写  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  </span><br><span class="line">user.setName(<span class="string">&quot;De&quot;</span>);  </span><br><span class="line">user.setAge(<span class="number">21</span>);  </span><br><span class="line">Example&lt;User&gt; example = Example.of(user, matcher);  </span><br><span class="line">List&lt;User&gt; all = userRepository.findAll(example);  </span><br><span class="line">System.out.println(all);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//分页查询  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findPageUserAll</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="comment">//设置分页参数  </span></span><br><span class="line"><span class="comment">//0代表第一页  </span></span><br><span class="line"><span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="comment">//查询条件  </span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  </span><br><span class="line">user.setName(<span class="string">&quot;Demon&quot;</span>);  </span><br><span class="line">user.setAge(<span class="number">21</span>);  </span><br><span class="line">Example&lt;User&gt; userExample = Example.of(user);<span class="comment">//查询条件  </span></span><br><span class="line">Page&lt;User&gt; page = userRepository.findAll(userExample, pageable);  </span><br><span class="line">System.out.println(page.getContent());  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//修改操作  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="comment">//先根据id出要修改的用户  </span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(<span class="string">&quot;2&quot;</span>).get();  </span><br><span class="line"><span class="comment">//设置修改的值  </span></span><br><span class="line">user.setAge(<span class="number">24</span>);  </span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userRepository.save(user);  </span><br><span class="line">System.out.println(user1);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//删除  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;  </span><br><span class="line">userRepository.deleteById(<span class="string">&quot;2&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Configuration和@Component 区别</title>
      <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/Spring/@Configuration%E5%92%8C@Component%20%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/05/08/%E5%90%8E%E7%AB%AF/Spring/@Configuration%E5%92%8C@Component%20%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在@Component 类中使用方法或字段时不会使用 CGLIB 增强 (及不使用代理类：调用任何方法，使用任何变量，拿到的是原始对象，后面会有例子解释)。在@Component 中调用@Bean 注解的方法和字段则是普通的 Java 语义，不经过 CGLIB 处理。<br>而在@Configuration 类中使用方法或字段时则使用 CGLIB 创造协作对象（及使用代理：拿到的是代理对象）; 当调用@Bean 注解的方法时它不是普通的 Java 语义，而是从容器中拿到由 Spring 生命周期管理、被 Spring 代理甚至依赖于其他 Bean 的对象引用。</p></blockquote><p>@Configuration 本质上还是个@Component，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line"><span class="meta">@AliasFor(annotation = Component.class)</span>  </span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring 中，对于配置类来讲是有分类的，大体可以分为两类，<strong>一类称为 LITE 模式，另一类称为 FULL 模式</strong>，那么对应上面的注解，@Component 就是 LITE 类型，@Configuration 就是 FULL 类型。</p><p><a href="https://zhuanlan.zhihu.com/p/607801167">Spring注解配置：@Configuration 和 @Component 区别及原理详解 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO笔记</title>
      <link href="/2023/04/28/%E5%90%8E%E7%AB%AF/Java/NIO%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/28/%E5%90%8E%E7%AB%AF/Java/NIO%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">IO</th><th align="center">NIO</th></tr></thead><tbody><tr><td align="center">面向流</td><td align="center">面向缓冲区</td></tr><tr><td align="center">阻塞 IO</td><td align="center">非阻塞 IO</td></tr><tr><td align="center"></td><td align="center">选择器（Selector）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2023/04/26/%E5%90%8E%E7%AB%AF/Java/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/04/26/%E5%90%8E%E7%AB%AF/Java/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>hexo 官网：<a href="https://hexo.io/zh-cn/index.html">Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
